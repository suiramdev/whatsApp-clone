{"version":3,"sources":["components/Contact.js","components/SideBar.js","components/Main.js","components/App.js","serviceWorker.js","index.js"],"names":["Contact","state","className","Avatar","style","marginLeft","Component","SideBar","type","placeholder","Main","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0WAoBeA,E,4MAfXC,MAAQ,G,uDAEJ,OACI,uBAAGC,UAAU,WACT,kBAACC,EAAA,EAAD,MACA,yBAAKC,MAAO,CAACC,WAAY,WACrB,wBAAIH,UAAU,iBAAd,gBACA,uBAAGA,UAAU,wBAAb,oCAEJ,uBAAGA,UAAU,iBAAb,iB,GAVMI,a,oECgCPC,E,4MA1BdN,MAAQ,G,uDAEP,OACC,yBAAKC,UAAU,WACF,yBAAKA,UAAU,mBACX,kBAACC,EAAA,EAAD,MACA,yBAAKD,UAAU,2BACX,2BAAG,kBAAC,IAAD,OACH,2BAAG,kBAAC,IAAD,OACH,2BAAG,kBAAC,IAAD,SAGX,yBAAKA,UAAU,mBACX,yBAAKA,UAAU,yBACX,2BAAOM,KAAK,OAAOC,YAAY,kBAC/B,gCAAQ,kBAAC,IAAD,SAGhB,yBAAKP,UAAU,kBACX,kBAAC,EAAD,Y,GApBEI,a,0CCqBPI,E,4MAvBXT,MAAQ,G,uDAEJ,OACI,yBAAKC,UAAU,QACX,yBAAKA,UAAU,gBACX,kBAACC,EAAA,EAAD,MACA,wBAAID,UAAU,sBAAd,iBAEJ,yBAAKA,UAAU,eAGf,yBAAKA,UAAU,gBACX,yBAAKA,UAAU,sBACX,2BAAOM,KAAK,OAAOC,YAAY,sBAC/B,gCAAQ,kBAAC,IAAD,QAEZ,gCAAQ,kBAAC,IAAD,a,GAjBTH,aCWJK,E,4MAXXV,MAAQ,G,uDAEJ,OACI,yBAAKC,UAAU,OACX,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GANEI,aCOEM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f23c9370.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Contact.scss';\r\nimport { Avatar } from '@material-ui/core';\r\n\r\nclass Contact extends Component {\r\n    state = {  }\r\n    render() { \r\n        return (\r\n            <a className=\"contact\">\r\n                <Avatar/>\r\n                <div style={{marginLeft: 0.5+\"rem\"}}>\r\n                    <h1 className=\"contact__name\">Contact name</h1>\r\n                    <p className=\"contact__description\">The last message sent goes here</p>\r\n                </div>\r\n                <p className=\"contact__time\">12:00:50</p>\r\n            </a>\r\n        );\r\n    }\r\n}\r\n \r\nexport default Contact;","import React, { Component } from 'react';\r\nimport './SideBar.scss';\r\nimport Contact from './Contact';\r\nimport { Avatar } from '@material-ui/core';\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\nimport ChatIcon from '@material-ui/icons/Chat';\r\nimport DonutLargeIcon from '@material-ui/icons/DonutLarge';\r\nimport SearchRoundedIcon from '@material-ui/icons/SearchRounded';\r\n\r\nclass SideBar extends Component {\r\n\tstate = {  }\r\n\trender() { \r\n\t\treturn (\r\n\t\t\t<div className=\"sidebar\">\r\n                <div className=\"sidebar__header\">\r\n                    <Avatar />\r\n                    <div className=\"sidebar__header-options\">\r\n                        <a><DonutLargeIcon/></a>\r\n                        <a><ChatIcon /></a>\r\n                        <a><MoreVertIcon /></a>\r\n                    </div>\r\n                </div>\r\n                <div className=\"sidebar__search\">\r\n                    <div className=\"sidebar__search-entry\">\r\n                        <input type=\"text\" placeholder=\"Search a chat\"></input>\r\n                        <button><SearchRoundedIcon /></button>\r\n                    </div>\r\n                </div>\r\n                <div className=\"sidebar__chats\">\r\n                    <Contact />\r\n                </div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n \r\nexport default SideBar;","import React, { Component } from 'react';\r\nimport './Main.scss';\r\nimport { Avatar } from '@material-ui/core';\r\nimport SendRoundedIcon from '@material-ui/icons/SendRounded';\r\nimport SentimentVerySatisfiedRoundedIcon from '@material-ui/icons/SentimentVerySatisfiedRounded';\r\n\r\nclass Main extends Component {\r\n    state = {  }\r\n    render() { \r\n        return (\r\n            <div className=\"main\">\r\n                <div className=\"main__header\">\r\n                    <Avatar />\r\n                    <h1 className=\"main__header-title\">Contact name</h1>\r\n                </div>\r\n                <div className=\"main__chat\">\r\n                    \r\n                </div>\r\n                <div className=\"main__footer\">\r\n                    <div className=\"main__footer-entry\">\r\n                        <input type=\"text\" placeholder=\"Type your message\"></input>\r\n                        <button><SentimentVerySatisfiedRoundedIcon /></button>\r\n                    </div>\r\n                    <button><SendRoundedIcon /></button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n \r\nexport default Main;","import React, { Component } from 'react';\nimport './App.scss';\nimport SideBar from './SideBar';\nimport Main from './Main';\n\nclass App extends Component {\n    state = {  }\n    render() { \n        return (\n            <div className=\"app\">\n                <SideBar />\n                <Main />\n            </div>\n        );\n    }\n}\n \nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}